/**
* the \@param notation indicates an input paramater for a function. For example
* @param {string} foobar - indicates the function should accept a string
* and it should be called foobar, for example function(foobar){}
* \@return is the value that should be returned
*/

/**
* Write a function called `uselessFunction`.
* It should accept no arguments.
* It should return the null value.
* @return {null} - 'useless'.
*/

//your code here
function uselessFunction() {
  'use strict';
  return null;
}
//end your code

var bar = 'not a function';
var barType = typeof bar;

/**
* Assign the above variable 'bar' to an anonymous function with the following
* properites.
* @param {float[]} doubleArray - an array of floating point numbers.
* The function should multiply every number in the array by 2 (this should
* change the content of the array).
* @return {boolean} - true if the operation was sucessful, false otherwise.
* This should return false if any value in the array cannot be doubled.
*/

//your code here
bar = function doubleArray(inputArray) {
  'use strict';
  var i, retVal;
  retVal = true;

  if (!inputArray) {
    retVal = false;
    return retVal;
  }

  if (inputArray) {
    for (i = 0; i < inputArray.length; i++) {
      inputArray[i] = 2 * inputArray[i];

      //check to see if there is a numerical value in the array element.
      if (isNaN(inputArray[i]) && retVal) {
        // set retVal to report a value did not convert cleanly.
        retVal = false;
      }
    }
  }

  return retVal;
};
//end your code

/**
* Creates a new GitLog
* @class
* @property {string} hash - the hash of the commit
* @property {Date} date - the date of the commit as a JS Date object
* @property {string} message - the commit message
*/
function GitLog(hash, date, message) {
  'use strict';
  this.hash = hash;
  this.date = date;
  this.message = message;
}
/**
* Create a function called parseGit to parse Git commit logs
* The logs will be generated by the following command
* git log --pretty=format:"%h %ad \"%s\"" --date=rfc
* The result looks like this
* 3782618 Wed, 7 Jan 2015 21:42:26 -0800 "Initial commit"
* |hash | |             date           | |   message    |
* There will always be a space between the hash and date and between the date
* and the first " of the commit message.
*
* You will covert these into GitLog objects with the following properties:
*
*
* @param {array.<string>} logArray - an array of Git commit messages of the
* above
* format.
* @return {array.<GitLog>} - return an array GitLog instances
*/

//your code here
function parseGit(gitArray) {
  'use strict';
  var tempArray, tempValue, tempValue1, tempValue2, tempValue3, i;

  tempArray = new Array(gitArray.length);

  for (i = 0; i < gitArray.length; i++) {

    tempValue1 = gitArray[i].substring(0, gitArray[i].indexOf(' '));

    tempValue2 = new Date(gitArray[i].substr(gitArray[i].indexOf(' ') + 1,
      gitArray[i].indexOf('\"') - gitArray[i].indexOf(' ')));

    tempValue3 = substring-after(gitArray[i], '\"');

    tempValue3 = substring-before(tempValue3, '\"');
    /*tempValue3 = gitArray[i].substr(gitArray[i].indexOf('\"'),
      (gitArray[i].length - 1) - gitArray[i].indexOf('\"') + 2);*/

    tempValue = new GitLog(tempValue1, tempValue2, tempValue3);

    tempArray[i] = tempValue;
  }

  return tempArray;
}
//end your code
